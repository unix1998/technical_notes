1 :Create a New Project:

$ oc new-project my-app-project

2 : Create an S2I Build Configuration:
You will need to provide a BuildConfig YAML : buildconfig.yaml  to specify the source repository and the builder image.

here is example,
###############################
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: my-app
spec:
  source:
    type: Git
    git:
      uri: 'https://github.com/your-username/your-repo.git'
  strategy:
    type: Source
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: 'php:7.3'
  output:
    to:
      kind: ImageStreamTag
      name: 'my-app:latest'
#######################################

3  Apply the BuildConfig:
 $ oc start-build my-app

This step triggers the build process, which creates a container image from your source code.







Automatically Generated by OpenShift
When the build completes, OpenShift automatically creates the following resources if you donâ€™t explicitly define them:

ImageStream: To hold the resulting image from the build.
DeploymentConfig: To manage the deployment of your application pods.
Service: To expose your application internally within the cluster.
Route: To expose your application externally.



another possible step:
Customizing the DeploymentConfig  

If  need to customize the DeploymentConfig, we can export it, edit it, and then reapply it.


oc get dc my-app -o yaml > deploymentconfig.yaml

here is deploymentconfig.yaml

##########################################################
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: my-app
spec:
  replicas: 1
  selector:
    app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: image-registry.openshift-image-registry.svc:5000/my-app-project/my-app:latest
        # this file is geneated by Open Shift
        ports:
        - containerPort: 8080
        env:
        - name: ENV_VAR_NAME
          value: "value"
######################################################################
we can modify it and re-apply it :

$ oc apply -f deploymentconfig.yaml

if we need o customize the Service , do the same

oc get svc my-app -o yaml > service.yaml
  here is example of service file :
#######################################################################

apiVersion: v1
kind: Service
metadata:
  name: my-app
spec:
  selector:
    app: my-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
######################################################################

we may modify and apply it :

$ oc apply -f service.yaml




if we need modify route :

export route :
oc get route my-app -o yaml > route.yaml

here is example route ,
##################################################################
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: my-app
spec:
  host: custom-app.example.com
  to:
    kind: Service
    name: my-app
  port:
    targetPort: 8080
  tls:
    termination: edge
###################################################################

to Apply the customized Route:

$ oc apply -f route.yaml


To Summary :

Full Procedure Summary
BuildConfig YAML:  we need to provide this file to define the S2I build.
ImageStream:  Automatically generated by OpenShift during the build process.
DeploymentConfig YAML:  Automatically generated, but we can customize it as needed.
Service YAML:  Automatically generated, but we can customize it as needed.
Route YAML:  Automatically generated if exposed, but we can customize it as needed.
By following these steps, we can deploy  application using S2I in OpenShift, customize the deployment configuration, and expose it with a meaningful DNS name and ports. The key is to understand which parts OpenShift handles automatically and which parts we  may want to customize to fit our specific needs.














